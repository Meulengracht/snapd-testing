#!/bin/bash

set -x

PROJECT=$1
SERVICE_ENV=$2
TESTS_ENV=$3
TESTS_SCRIPT=$4
TESTS_CONFIG=$5
WORKSPACE=$6

if ! "$WORKSPACE"/snapd-testing/validation/check-env; then
    echo "Error checking dependencies, please run "$WORKSPACE"/snapd-testing/validation/create-env script"
    exit 1
fi

if [ ! "$PROJECT" ]; then
    echo "Porject not defined, exiting..."
    exit 1
fi

# Load environment variables
. "${WORKSPACE}/snapd-testing/validation/config/jobs/common.sh" "$WORKSPACE"
if [ ! -f "${WORKSPACE}/snapd-testing/validation/config/jobs/${SERVICE_ENV}.sh" ]; then
    echo "configuration file does not exist, exiting"
    exit 1
fi
. "${WORKSPACE}/snapd-testing/validation/config/jobs/${SERVICE_ENV}.sh"

if [ -n "$HTTPS_PROXY" ]; then
    export HTTPS_PROXY=https://squid.internal:3128
    export https_proxy=https://squid.internal:3128
    export HTTP_PROXY=https://squid.internal:3128
    export http_proxy=https://squid.internal:3128
    export NO_PROXY=testflinger.canonical.com,api.snapcraft.io
    export no_proxy=testflinger.canonical.com,api.snapcraft.io
fi
export $TESTS_ENV

# Run spread tests
"${WORKSPACE}/snapd-testing/validation/scripts/run_tests.sh" "$TESTS_CONFIG" | tee "$SPREAD_LOG"


# Determining the exit status for the run
# In case there are successful tasks it means the execution finished and there is at least 1 test executed successfully
if grep -e "Successful tasks:" "$SPREAD_LOG"; then
    # For edge cahnnel, a successful run is when all the tests have pass
    if [ "$TARGET_CHANNEL" = edge ]; then
        if grep -e "Failed tasks:" "$SPREAD_LOG" && ! grep -e "Aborted tasks: 0" "$SPREAD_LOG"; then
            echo "Execution finished and either not spread results included in log or there are failed/aborted tests in the logs"
            EXIT_STATUS=1
        else
            echo "Execution finished and spread results included in log without failed/aborted tests"
            EXIT_STATUS=0
        fi
    # For beta, candidate or stable, a successful run is when the execution finished without aborted tests
    # This is because there are known issues which fail and logs require manual review. In case of all tests
    # passed, the the jira card is automatically set as passed for that run.
    else
        if ! grep -e "Aborted tasks: 0" "$SPREAD_LOG"; then
            echo "Execution finished and either not spread results included in log or there are aborted tests in the log"
            EXIT_STATUS=1
        else
            echo "Execution finished and spread results included in log without aborted tests"
            EXIT_STATUS=0
        fi
    fi
else
    echo "Execution didn't finish and/or no tests passing in spread log"
    EXIT_STATUS=1
fi

# Get version and revision for either snap or image under test
if [ -z "$IMAGE_UT" ]; then    
    OBJECT_UT="$SNAP_UT"
    VERSION_UT="$(${WORKSPACE}/snapd-testing/scripts/snap-version.sh $SNAP_UT $TARGET_CHANNEL amd64)"
    REVISION_UT="$(${WORKSPACE}/snapd-testing/scripts/snap-revision.sh $SNAP_UT $TARGET_CHANNEL amd64)"
else
    OBJECT_UT="$IMAGE_UT"
    VERSION_UT="$TARGET_CHANNEL"
    REVISION_UT="($(date +%Y%m%d))"
fi

# Integrate results with jira board
if [ -n "$JIRA_ACCESS_TOKEN" ] && [ -n "$JIRA_ACCESS_TOKEN_SECRET" ] && [ -n "$JIRA_KEY_CERT" ]; then
    "${WORKSPACE}/snapd-testing/validation/services/jira-integrator" "$OBJECT_UT" "$VERSION_UT" "$REVISION_UT" "$TARGET_CHANNEL" "$JIRA_CONFIG" "$BOARD_UT" "$ARCH_UT" "$SPREAD_LOG" "$SUMMARY_LOG" "$ATTACH_LOG"
else
    echo "Skipping jira integration, variables needed in the environment: JIRA_ACCESS_TOKEN, JIRA_ACCESS_TOKEN_SECRET and JIRA_KEY_CERT"
fi

exit "$EXIT_STATUS"