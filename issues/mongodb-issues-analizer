#!/usr/bin/env python3

import argparse
import ast
import os
import subprocess
import sys

from datetime import datetime


QUERY_TOOL = "mongodb-query"
JIRA_TOOL = "jira-issues-publisher"
DATETIME_FILE = "last_issue"


class Issue:

    def __init__(self, issue_str):
        issue_dict = ast.literal_eval(issue_str)
        self.task = issue_dict.get('task', '')
        self.verb = issue_dict.get('verb', '')
        self.date = issue_dict.get('date')
        self.time = issue_dict.get('time')

        self._check_task()
        self._check_verb()

        self.backend = self._get_backend()
        self.system = self._get_system()
        self.test = self._get_test()
        self.suite = self._get_suite()
        self.test_name = self._get_test_name()

    def _check_task(self):
        if not self.task:
            raise ValueError("Empty task received")

    def _check_verb(self):
        if not self.verb:
            raise ValueError("Empty verb received")

    def _get_backend(self):
        try:
            return self.task.split(':')[0]
        except:
            raise ValueError("Wrong task format for task: {}".format(self.task))


    def _get_system(self):
        try:
            return self.task.split(':')[1]
        except:
            raise ValueError("Wrong task format for task: {}".format(self.task))

    def _get_test(self):
        try:
            return self.task.split(':')[2]
        except:
            raise ValueError("Wrong task format for task: {}".format(self.task))

    def _get_suite(self):
        try:
            test = self.task.split(':')[2]
            return '/'.join(test.split('/')[0:-1]) + '/'
        except:
            raise ValueError("Wrong task format for task: {}".format(self.task))

    def _get_test_name(self):
        try:
            test = self.task.split(':')[2]
            return test.split('/')[-1]
        except:
            raise ValueError("Wrong task format for task: {}".format(self.task))

    def get_title(self):
        return '{} {}'.format(self.verb, self.test_name)


class IssueSet:
    def __init__(self, issue):
        self.systems = []
        self.backends = []
        self.ocurrencies = 0

        self.add_issue(issue)

    def add_issue(self, issue):
        if not issue.system in self.systems:
            self.systems.append(issue.system)

        if not issue.backend in self.backends:
            self.backends.append(issue.backend)

        self.ocurrencies = self.ocurrencies + 1


class IssuesManager:
    
    def __init__(self):
        self.issues = {}

    def add_issue(self, issue):
        title = issue.get_title()
        if not title in self.issues.keys():
            issue_set = IssueSet(issue)
            self.issues[title] = issue_set
        else:
            issue_set = self.issues[title]
            issue_set.add_issue(issue)
            self.issues[title] = issue_set

    def get_titles(self):
        return self.issues.keys()

    def get_issue_set(self, title):
        if not title in self.issues.keys():
            raise RuntimeError("The issue: {} is not registered".format(title))

        return self.issues[title]


class JiraIntegrator:
    def __init__(self):
        self.jira_tool = JIRA_TOOL

    def publish(self, title, systems, backends, ocurrencies):
        line = "./{} create -t '{}' -o {}".format(self.jira_tool, title, ocurrencies) 
        for system in systems:
            line = line + " -s '{}'".format(system)
        print(line)
        output = subprocess.getoutput(line)
        print(output)

        

class MongoIntegrator:
    def __init__(self):
        self.query_tool = QUERY_TOOL
        self.time_manager = TimeManager()

    def _get_issues(self, after_date, after_time, limit):
        line = "./{} --limit {} --after-date {} --after-time {} --exclude-detail --type Error".format(self.query_tool, limit, after_date, after_time) 
        print(line)
        return subprocess.getoutput(line)

    def get_issues(self, limit=100):
        last_time = self.time_manager.get_time()
        if not last_time:
            today = datetime.today().strftime('%Y-%m-%d')
            issues = self._get_issues(today, '00:00:00', limit)
        else:
            issues = self._get_issues(last_time.split('T')[0], last_time.split('T')[1], limit)

        issues_reversed = list(reversed(issues.split('\n')))
        issues_without_empty = list(filter(lambda item: item.strip(), issues_reversed))
        return issues_without_empty

    def save_last_issue(self, date, time):
        self.time_manager.save_time(date, time)


class TimeManager:
    def __init__(self):
        self.time_file = DATETIME_FILE

    def get_time(self):
        if os.path.exists(self.time_file):
            with open(self.time_file, 'r') as f:
                return f.read()
        else:
            return None

    def save_time(self, date, time):
        datetime = '{}T{}'.format(date, time)
        with open(self.time_file, 'w') as f:
            f.write(datetime)



def _make_parser():
    parser = argparse.ArgumentParser()
    parser.add_argument('--host', help="Hostname or ip for the mongo database",
                        **environ_or_required('MONGO_HOST'))
    parser.add_argument('--port', help="Port for the mongo database",
                        **environ_or_required('MONGO_PORT'))
 
    return parser

def environ_or_required(key):
    if os.environ.get(key):
        return {'default': os.environ.get(key)}
    else:
        return {'required': True}

def main():
    parser = _make_parser()
    args = parser.parse_args()

    if not args.host or not args.port:
        print("report-mongodb: host or port not specified")
        sys.exit(1)

    mongo_integrator = MongoIntegrator()
    issues = mongo_integrator.get_issues()
    if not issues:
        print('No issues found since last request')
        return

    jira_integrator = JiraIntegrator()
    issues_manager = IssuesManager()

    for issue in issues:
        issues_manager.add_issue(Issue(issue))

    if issues:
        issue = Issue(issues[-1])
        mongo_integrator.save_last_issue(issue.date, issue.time)


    for title in issues_manager.get_titles():
        issue_set = issues_manager.get_issue_set(title)
        jira_integrator.publish(title, issue_set.systems, issue_set.backends, issue_set.ocurrencies)


if __name__ == "__main__":
    main()
